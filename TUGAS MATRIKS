/* Program Operasi Matrik
 * @author July Arifianto, Harry Akbar
 */
class Matrix {
  private int row;
  private int column;
  private int[][] matrix;
    
  /* 
   * Constructor
   * Membuat objek Matrik baru
   * @param a: int[][]
   */
  public Matrix(int[][] a) {
    matrix = a;
   	row = a.length;
    column = a[0].length;
  }
  
  /* 
   * Add
   * Menambahkan objek Matrix
   * @param b Matrix
   * @return void
   */
  public void add(Matrix b) {
     int[][] c = b.pure();
     for (int i=0; i < row; i++) {
       for (int j=0; j < column; j++) {
         matrix[i][j] += c[i][j];
       }
     }
  }
  
  /* 
   * substract
   * Mengurangkan objek Matrix
   * @param b Matrix
   * @return void
   */
  public void subtract(Matrix b) {
     int[][] c = b.pure(); 
     for (int i=0; i < row; i++) {
       for (int j=0; j < column; j++) {
         matrix[i][j] -= c[i][j];
       }
     }
  }
  
  /* 
   * transpose
   * Membuat nilai transpose dari objek Matrix
   * 
   * @return void
   */
  public void transpose() {
     int[][] b = new int[column][row]; 
     for (int i=0; i < row; i++) {
       for (int j=0; j < column; j++) {
         b[j][i] = matrix[i][j];
       }
     }
     matrix = b;
  }
  
  /* 
   * multiply
   * Mengalikan objek Matrix
   * @param a Matrix
   * @return void
   */
  public void multiply(Matrix a) {
     int[][] b = a.pure(); 
     int[][] c = new int[column][b[0].length]; 
     int sum;
     for (int i=0; i < row; i++) {
       for (int j=0; j < b[0].length; j++) {
         sum = 0;
         for (int k=0; k < column; k++) {
           sum += matrix[i][k] * b[k][j];
         }
         c[i][j] = sum;
       }
     }
    matrix = c;
  }
  
  /* 
   * multiply
   * Mengalikan objek Matrix dengan skalar
   * @param a Int
   * @return void
   */
   public void multiply(int a) {
     for (int i=0; i < row; i++) {
       for (int j=0; j < column; j++) {
         matrix[i][j] = matrix[i][j] * a;
       }
     }
  }
  
  /* 
   * transpose
   * Membuat transpose sebuah matrik
   * 
   * @return int[][]
   */
  public static int[][] transpose(int[][] a) {
     int[][] b = new int[a[0].length][a.length]; 
     for (int i=0; i < a.length; i++) {
       for (int j=0; j < a[0].length; j++) {
         b[j][i] = a[i][j];
       }
     }
    return b;
  }
  
  /* 
   * add
   * Menjumlahkan 2 matrik
   * @param a: int[][]
   * @param b: int[][]
   * @return int[][]
   */
  public static int[][] add(int[][] a, int[][] b) {
     int[][] c = new int[a.length][a[0].length]; 
     for (int i=0; i < a.length; i++) {
       for (int j=0; j < a[0].length; j++) {
         c[i][j] = a[i][j] + b[i][j];
       }
     }
    return c;
  }
  
  /* 
   * subtract
   * Pengurangan matrik
   * @param a: int[][]
   * @param b: int[][]
   * @return int[][]
   */
  public static int[][] subtract(int[][] a, int[][] b) {
     int[][] c = new int[a.length][a[0].length]; 
     for (int i=0; i < a.length; i++) {
       for (int j=0; j < a[0].length; j++) {
         c[i][j] = a[i][j] - b[i][j];
       }
     }
    return c;
  }
  
  /* 
   * multiply
   * perkalian 2 matrik
   * @param a: int[][]
   * @param b: int[][]
   * @return int[][]
   */
  public static int[][] multiply(int[][] a, int[][] b) {
     int[][] c = new int[a[0].length][b[0].length]; 
     int sum;
     for (int i=0; i < a.length; i++) {
       for (int j=0; j < b[0].length; j++) {
         sum = 0;
         for (int k=0; k < a[0].length; k++) {
           sum += a[i][k] * b[k][j];
         }
         c[i][j] = sum;
       }
     }
    return c;
  }
  
  /* 
   * multiply
   * perkalian sebuah matrik dengan skalar
   * @param a: int[][]
   * @param b: int
   * @return int[][]
   */
  public static int[][] multiply(int[][] a, int b) {
     int sum;
     for (int i=0; i < a.length; i++) {
       for (int j=0; j < a[0].length; j++) {
         a[i][j] = a[i][j] * b;
       }
     }
    return a;
  }
   
  /* 
   * pure
   * mengembalikan matrik dari Matrix
   *
   * @return int[][]
   */
  public int[][] pure() {
    return matrix;
  }
  
  /* 
   * getSize
   * mengembalikan ukuran dari Matrix
   * 
   * @return [row,column]
   */
  public int[] getSize() {
    int[] size = {row, column};
    return size;
  }
  
  /* 
   * display
   * menampilkan matrik dalam bentuk string
   * @param a int[][]
   * @return void
   */
  public static void display(int[][] a) {
    String str = "[";
    for (int i=0; i < a.length; i++) {
      	if (i != 0) str += " ";
      	str += "[";
      	for (int j=0; j < a[0].length; j++) {
		  str += a[i][j];
          if (j != a[0].length-1) str += " ";
    	}	
      	str += "]";
      	if (i != a.length-1) str += "\n";
    }
    str += "]";
    
    System.out.println(str);
  }
  
  /* 
   * display
   * menampilkan matrik dalam bentuk string
   *
   * @return void
   */
  public void display() {
    String str = "[";
    for (int i=0; i < row; i++) {
      	if (i != 0) str += " ";
      	str += "[";
      	for (int j=0; j < column; j++) {
		  str += matrix[i][j];
          if (j != column-1) str += " ";
    	}	
      	str += "]";
      	if (i != row-1) str += "\n";
    }
    str += "]";
    
    System.out.println(str);
  }
  
  @Override
  public String toString() {
    String str = "[";
    for (int i=0; i < row; i++) {
      	if (i != 0) str += " ";
      	str += "[";
      	for (int j=0; j < column; j++) {
		  str += matrix[i][j];
          if (j != column-1) str += " ";
    	}	
      	str += "]";
      	if (i != row-1) str += "\n";
    }
    str += "]";
    
    return str;
  }
  
  public static void main(String[] args) {
    int[][] a = {{1,2},{3,4}};
    int[][] b = {{5,2,3},{1,3,1}};
    Matrix m1 = new Matrix(a);
    Matrix.display(a);
    Matrix.display(b);
    int[][] c = Matrix.multiply(a, 2);
    //c = Matrix.transpose(a);
    Matrix.display(c); 
  }
}
